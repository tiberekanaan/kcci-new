/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  var selectors = {
    wrapper: {
      initial: "data-drupal-messages",
      active: "js-messages__wrapper"
    },
    message: {
      id: "data-drupal-message-id",
      active: "messages__closeable",
      button: "drupal-message-close"
    }
  };

  var lbMessageList = [];

  var buttonClose = function buttonClose(id) {
    var buttonSelector = selectors.message.button;

    var button = document.createElement("button");
    button.innerHTML = "<span class=\"visually-hidden\">" + Drupal.t("Close") + "</span>";
    button.setAttribute("data-drupal-close-id", id);
    button.classList.add(buttonSelector);

    return button;
  };

  var initMessage = function initMessage(message, index) {
    var _selectors$message = selectors.message,
        id = _selectors$message.id,
        active = _selectors$message.active;

    message.classList.add(active);
    message.style.setProperty("--animation-index", index);
    message.setAttribute(id, index);
    message.appendChild(buttonClose(index));
  };

  var addMessage = function addMessage(message) {
    var text = message.textContent.trim();
    var newMessage = lbMessageList.indexOf(text) === -1;
    if (newMessage) {
      lbMessageList.push(text);
      initMessage(message, lbMessageList.length);
    }

    return newMessage;
  };

  var getMessages = function getMessages(container) {
    return Array.prototype.slice.call(container.querySelectorAll(".messages"));
  };

  var initMessages = function initMessages() {
    var _selectors$wrapper = selectors.wrapper,
        initial = _selectors$wrapper.initial,
        active = _selectors$wrapper.active;
    var _selectors$message2 = selectors.message,
        id = _selectors$message2.id,
        button = _selectors$message2.button;


    var lbOuter = document.querySelector("[data-drupal-selector=edit-layout-builder-message] > [" + initial + "]");

    var children = Array.prototype.slice.call(lbOuter.children);
    var lbInner = children.filter(function (element) {
      return !element.classList.contains("messages");
    }).shift();

    var lbContainer = lbInner || lbOuter;

    if (!lbContainer.classList.contains(active)) {
      lbContainer.classList.add(active);
      getMessages(lbContainer).forEach(addMessage);

      var mainCanvas = document.querySelector("[data-off-canvas-main-canvas]");
      if (mainCanvas) {
        var paddingEdge = Drupal.offCanvas.getEdge() === "right" ? "paddingRight" : "paddingLeft";

        mainCanvas.addEventListener("transitionend", function () {
          lbContainer.style[paddingEdge] = mainCanvas.style[paddingEdge];
          lbContainer.style.paddingTop = mainCanvas.style.paddingTop;
        });
      }

      lbContainer.addEventListener("click", function (event) {
        if (event.target.classList.contains(button)) {
          event.preventDefault();
          lbContainer.querySelector("[" + id + "=\"" + event.target.dataset.drupalCloseId + "\"]").remove();
        }
      });
    }

    var containers = Array.prototype.slice.call(document.querySelectorAll("[" + initial + "]")).filter(function (element) {
      return !element.isEqualNode(lbOuter);
    });

    containers.forEach(function (container) {
      getMessages(container).forEach(function (message) {
        if (addMessage(message)) {
          lbContainer.append(message);
        } else {
          message.remove();
        }
      });
    });
  };

  Drupal.behaviors.LbUXMessage = {
    attach: function attach() {
      initMessages();
    }
  };
})(jQuery, Drupal);